openapi: 3.0.1
info:
  title: User API
  description: API for managing users
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/v1
    description: Local development server

paths:
  /users:
    get:
      summary: Get all users
      tags:
        - Users
      description: Retrieves a list of all users. Requires a valid JWT token.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '500':
          description: Server error

    post:
      summary: Create a new user
      tags:
        - Users
      description: Creates a user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "example@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  newUser:
                    $ref: '#/components/schemas/User'
        '500':
          description: Server error

  /users/{id}:
    get:
      summary: Get a user by ID
      tags:
        - Users
      description: Retrieves a single user by their ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Server error

    delete:
      summary: Delete a user by ID
      tags:
        - Users
      description: Deletes a single user by their ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted
        '500':
          description: Server error

    put:
      summary: Update a user by ID
      tags:
        - Users
      description: Updates a user's email and password
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: Server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "1"
        email:
          type: string
          example: "example@example.com"
        password:
          type: string
          example: "password123"